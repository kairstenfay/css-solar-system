{"version":3,"sources":["components/utils.js","components/SolarSystem.js","components/App.js","serviceWorker.js","index.js"],"names":["revolve","keyframes","SolarSystem","planets","planetColors","planetMercuryRadii","viewBox","width","height","id","offset","stopColor","map","m","i","key","fx","fy","cx","cy","r","Math","floor","random","fill","transform","stroke","strokeWidth","Revolve","styled","g","React","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oeAGO,IAAMA,EAAUC,YAAH,K,uQCECC,E,iLACP,IAKAC,EAAU,CAAC,UAAW,QAAS,QAAS,OAAQ,UAAW,SAAU,SAAU,WAC/EC,EAAe,CACjB,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,WACZ,CAAC,UAAW,YAIVC,EAAqB,CAAC,EAAG,IAAK,EAAG,IAAK,EAAG,IAAK,IAAK,KAEzD,OACI,6BACI,gDAEA,yBAAKC,QAAO,cAASC,IAAT,YAA+BC,KACtCD,MAAM,OACNC,OAAO,QAER,8BACI,oCAAgBC,GAAG,eACf,0BAAMC,OAAO,KAAKC,UAAU,WAC5B,0BAAMD,OAAO,OAAOC,UAAU,YAGjCR,EAAQS,IAAI,SAACC,EAAGC,GAAJ,OACT,oCACIC,IAAG,gBAAWD,GACdL,GAAE,gBAAWK,GACbE,GAAG,MAAMC,GAAG,MACZC,GAAG,MAAMC,GAAG,MACZC,EAAE,OACF,0BAAMV,OAAO,KAAKC,UAAWP,EAAaU,GAAG,KAC7C,0BAAMJ,OAAO,OAAOC,UAAWP,EAAaU,GAAG,QAd3D,KAmBA,uBAAGC,IAAI,SACFZ,EAAQS,IAAI,SAACC,EAAGC,GAAJ,OACT,4BAAQC,IAAG,cAASD,GACZI,GAAIG,KAAKC,MAjDC,IAiDKD,KAAKE,UACpBJ,GAAIE,KAAKC,MAlDJ,IAkDUD,KAAKE,UACpBH,EAAGC,KAAKE,SACRC,KAAK,YANrB,KASA,uBAAGT,IAAI,iBACJU,UAAS,oBAAelB,IAAf,aAA6BC,IAA7B,MACR,4BAAQO,IAAI,MACJG,GAAG,IAAIC,GAAG,IACVC,EAzDN,GA0DMI,KAAK,sBAEZrB,EAAQS,IAAI,SAACC,EAAGC,GAAJ,OACT,4BAAQC,IAAG,eAAUD,GACbI,GAAG,IAAIC,GAAG,IACVC,EAAO,GAAJN,EAjDA,GAkDHU,KAAK,cACLE,OAAO,OACPC,YAAY,QAb5B,KAiBA,uBAAGZ,IAAI,UACJU,UAAS,oBAAelB,IAAf,aAA6BC,IAA7B,MACPL,EAAQS,IAAI,SAACC,EAAGC,GAEb,IAAMc,EAAUC,IAAOC,EAAV,IAGA9B,EAAe,EAAJc,EAAQ,GAEhC,OACI,kBAACc,EAAD,KACI,4BAAQb,IAAK,SAAWD,EAChBI,GAAQ,GAAJJ,EApET,GAqEKK,GAAG,IACHC,EAA2B,EAAxBf,EAAmBS,GACtBU,KAAI,qBAAgBV,EAAhB,iB,GAzFPiB,IAAMC,WCWhCC,MAZf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,eAGlB,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2f55b17d.chunk.js","sourcesContent":["import { keyframes } from 'styled-components';\n\n\nexport const revolve = keyframes`\n    from {\n        transform: rotate(0deg);\n    }\n    to {\n        transform: rotate(360deg);\n`\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { revolve } from './utils';\n\nexport default class SolarSystem extends React.Component {\n    render() {\n        const [width, height, margin] = [300, 300, 10];\n\n        const sunRadius = 20;\n\n        const planets = ['mercury', 'venus', 'earth', 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'];\n        const planetColors = [\n            [\"#9a3718\", \"#b0983c\"],\n            [\"#fd4425\", \"#ecc349\"],\n            [\"#2b76a3\", \"#3a6f9e\"],\n            [\"#be3025\", \"#b55254\"],\n            [\"#a5804a\", \"#c2afa0\"],\n            [\"#6e3e21\", \"#b5a395\"],\n            [\"#475d7b\", \"#5d71b1\"],\n            [\"#2c46af\", \"#3a4fa7\"]\n        ];\n\n        const mercuryDistanceFromSun = 30;\n        const planetMercuryRadii = [1, 1.5, 2, 1.8, 3, 2.4, 2.3, 2.5];\n\n        return (\n            <div>\n                <h1>The Solar System</h1>\n\n                <svg viewBox={`0 0 ${width + margin * 2} ${height + margin * 2}`}\n                     width=\"100%\"\n                     height=\"100%\">\n\n                    <defs>\n                        <radialGradient id=\"SunGradient\">\n                            <stop offset=\"0%\" stopColor=\"yellow\"/>\n                            <stop offset=\"100%\" stopColor=\"orange\"/>\n                        </radialGradient>\n\n                        {planets.map((m, i) =>\n                            <radialGradient\n                                key={`planet${i}`}\n                                id={`Planet${i}`}\n                                fx=\"0.5\" fy=\"0.5\"\n                                cx=\"0.5\" cy=\"0.5\"\n                                r=\"0.9\">\n                                <stop offset=\"0%\" stopColor={planetColors[i][0]} />\n                                <stop offset=\"100%\" stopColor={planetColors[i][1]} />\n                            </radialGradient>\n                        )};\n                    </defs>\n\n                    <g key=\"stars\">\n                        {planets.map((m, i) =>\n                            <circle key={`star${i}`}\n                                    cx={Math.floor(Math.random() * height)}\n                                    cy={Math.floor(Math.random() * width)}\n                                    r={Math.random()}\n                                    fill=\"white\" />\n                        )};\n                    </g>\n                    <g key=\"sun-and-orbits\"\n                       transform={`translate(${width / 2}, ${height / 2})`}>\n                        <circle key=\"sun\"\n                                cx=\"0\" cy=\"0\"\n                                r={sunRadius}\n                                fill=\"url(#SunGradient)\" />\n\n                        {planets.map((m, i) =>\n                            <circle key={`orbit${i}`}\n                                    cx=\"0\" cy=\"0\"\n                                    r={i * 15 + mercuryDistanceFromSun} // TODO planetaryOrbitLengths\n                                    fill=\"transparent\"\n                                    stroke=\"grey\"\n                                    strokeWidth=\"1\" />\n                        )};\n                    </g>\n\n                    <g key=\"planets\"\n                       transform={`translate(${width / 2}, ${height / 2})`}>\n                        {planets.map((m, i) => {\n\n                            const Revolve = styled.g`\n                            display: inline-block;\n                            width: 100%;\n                            animation: ${revolve} ${i * 4 + 5}s linear infinite;\n                            `\n                            return (\n                                <Revolve>\n                                    <circle key={'planet' + i}\n                                            cx={i * 15 + mercuryDistanceFromSun}\n                                            cy=\"0\"\n                                            r={planetMercuryRadii[i] * 4}\n                                            fill={`url(#Planet${i})`} />\n                                </Revolve>\n                            );\n                        })}\n                    </g>\n                </svg>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport '../App.css';\nimport SolarSystem from './SolarSystem';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      </header>\n\n      <SolarSystem />\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}